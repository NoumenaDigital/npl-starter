package objects.iou

struct TimestampedAmount {
    amount: Number,
    timestamp: DateTime
};

function total(entries: List<TimestampedAmount>) -> entries.map(function(p: TimestampedAmount) -> p.amount).sum();

@api
protocol[borrower, lender] Iou(
    var forAmount: Number,
    var paymentDeadline: DateTime,
    var lateFee: Number
) {
    require(forAmount > 0, "Initial amount must be strictly positive");

    initial state unpaid;
    state overdue;
    final state paid;
    final state forgiven;

    private var payments = listOf<TimestampedAmount>();

    function amountOwed() returns Number -> forAmount - total(payments);

    @api
    obligation[borrower] pay(amount: Number) before paymentDeadline | unpaid {
        require(amount > 0, "Amount must be strictly positive");
        require(amount <= amountOwed(), "Amount may not exceed amount owed");

        var p = TimestampedAmount(amount = amount, timestamp = now());
        payments = payments.with(p);

        if (amountOwed() == 0) {
            become paid;
        };
    } otherwise become overdue;

    @api
    permission[lender] chargeLateFee() | overdue {
        forAmount = forAmount + lateFee;
        paymentDeadline = now() + months(1);

        become unpaid;
    };

    @api
    permission[lender] forgive() | unpaid {
        become forgiven;
    };

    @api
    permission[borrower|lender] getAmountOwed() returns Number {
        return amountOwed();
    };
}
