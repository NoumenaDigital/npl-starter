package objects.iou;

struct TimestampedAmount {
    amount: Number,
    timestamp: DateTime
};

@api
protocol[borrower, lender] Iou(var forAmount: Number) {
    require(forAmount > 0, "Initial amount must be strictly positive");

    initial state owed;
    state awaiting_payment_confirmation;
    final state settled;
    final state cancelled;

    var amountOwed: Number = forAmount;
    var paymentToBeConfirmed: Optional<TimestampedAmount> = optionalOf<TimestampedAmount>();

    @api
    permission[borrower] pay(amount: Number) | owed {
        require(amount > 0, "Amount must be strictly positive");
        require(amount <= amountOwed, "Amount may not exceed amount owed");

        paymentToBeConfirmed = optionalOf(
            TimestampedAmount(amount = amount, timestamp = now())
        );

        become awaiting_payment_confirmation;
    };

    @api
    permission[lender] confirmPayment() | awaiting_payment_confirmation {

        amountOwed = amountOwed - paymentToBeConfirmed.getOrFail().amount;
        paymentToBeConfirmed = optionalOf<TimestampedAmount>();

        if (amountOwed == 0) {
            become settled;
        } else {
            become owed;
        };
    };

    @api
    permission[lender] cancel() | owed {
        become cancelled;
    };
}
