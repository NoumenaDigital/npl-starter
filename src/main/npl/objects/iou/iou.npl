package objects.iou;

struct Payment {
    amount: Number,
    timestamp: DateTime
};

@api
protocol[borrower, lender] Iou(var initialDebt: Number) {
    require(initialDebt > 0, "Initial debt must be strictly positive");

    initial state issued;
    state awaitingPaymentConfirmation;
    state partiallySettled;
    final state settled;
    final state cancelled;

    var remainingDebt: Number = initialDebt;
    var paymentClaim: Optional<Payment> = optionalOf<Payment>();

    @api
    permission[borrower] pay(amount: Number) | issued, partiallySettled {
        require(amount > 0, "Payment amount must be strictly positive");
        require(amount <= remainingDebt, "Payment amount may not exceed remaining debt");

        paymentClaim = optionalOf(
            Payment(amount = amount, timestamp = now())
        );

        become awaitingPaymentConfirmation;
    };

    @api
    permission[lender] confirmPayment() | awaitingPaymentConfirmation {

        remainingDebt = remainingDebt - paymentClaim.getOrFail().amount;
        paymentClaim = optionalOf<Payment>();

        if (remainingDebt > 0) {
            become partiallySettled;
        } else {
            become settled;
        };
    };

    @api
    permission[lender] cancel() {
        become cancelled;
    };
}
