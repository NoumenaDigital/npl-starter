require("../../main/npl/iou.npl");

const ISSUER: Party = 'issuer';
const PAYEE: Party = 'payee';

function test_initial_amount_owed(test: Test) {
    iou: Iou = Iou[ISSUER, PAYEE](100);

    test.ok(iou.getAmountOwed[ISSUER]() == 100, "Amount owed should equal initial value");
};

function test_amount_owed_after_pay(test: Test) {
    iou: Iou = Iou[ISSUER, PAYEE](100);
    iou.pay[ISSUER](50);

    test.ok(iou.getAmountOwed[ISSUER]() == 50, "Amount owed should reflect payment");
};

function test_pay_negative_amount(test: Test) {
    iou: Iou = Iou[ISSUER, PAYEE](100);
    result: Any = test.pcall(\() returns Any -> iou.pay[ISSUER](-10));

    test.ok(result.failure, "Paying negative amounts should fail");
};

function test_overpaying(test: Test) {
    iou: Iou = Iou[ISSUER, PAYEE](100);
    result: Any = test.pcall(\() returns Any -> iou.pay[ISSUER](101));

    test.ok(result.failure, "Overpaying should fail");
};
