package objects

use objects.iou.Iou;
use sample.v1.concat;

const ISSUER = 'issuer';
const PAYEE = 'payee';

@test
function test1(test: Test) -> {

    var iou = Iou[ISSUER, PAYEE](100);

    test.assertEquals(iou, Iou[ISSUER, PAYEE](100), "Equals");
};

@test
function test_initial_amount_owed(test: Test) -> {
    info(concat("NPL contrib ", "is enabled."));

    var iou = Iou[ISSUER, PAYEE](100);

    test.assertEquals(100, iou.getAmountOwed[ISSUER](), "Amount owed should equal initial value");
};

@test
function test_amount_owed_after_pay(test: Test) -> {
    var iou = Iou[ISSUER, PAYEE](100);
    iou.pay[ISSUER](50);

    test.assertEquals(50, iou.getAmountOwed[ISSUER](), "Amount owed should reflect payment");
};

@test
function test_pay_negative_amount(test: Test) -> {
    var iou = Iou[ISSUER, PAYEE](100);

    test.assertFails(function() -> iou.pay[ISSUER](-10), "Paying negative amounts should fail");
};

@test
function test_overpaying(test: Test) -> {
    var iou = Iou[ISSUER, PAYEE](100);

    test.assertFails(function() -> iou.pay[ISSUER](101), "Overpaying should fail");
};
