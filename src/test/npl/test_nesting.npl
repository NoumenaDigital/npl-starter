const CUSTOMER: Party = 'customer';
const COMPANY: Party = 'company';

@test
function test_cost(test: Test) {
    p: Product = Product[CUSTOMER, COMPANY](5, 0.85);

    // Compute and verify initial cost
    initialCost: Number = p.computeMonthlyCost[CUSTOMER]();
    test.assertEquals(4.25, initialCost);
};

@test
function test_illegal_rate_increase(test: Test) {
    p: Product = Product[CUSTOMER, COMPANY](5, 0.85);

    // Attempt an illegal rate increase, and expect failure
    test.assertFails(\() returns Unit -> p.conditions.setRate[COMPANY](0.9), "Raising the rate should fail");
};

@test
function test_rate_increase(test: Test) {
    p: Product = Product[CUSTOMER, COMPANY](5, 0.85);

    // Forward the clock, attempt increase
    test.setTime(now().plus(months(1)));
    p.conditions.setRate[COMPANY](0.9);

    // Compute and verify new cost
    newCost: Number = p.computeMonthlyCost[CUSTOMER]();
    test.assertEquals(4.5, newCost);
};

@test
function test_change_of_conditions(test: Test) {
    p: Product = Product[CUSTOMER, COMPANY](5, 0.85);

    // Compute and verify initial cost
    initialCost: Number = p.computeMonthlyCost[CUSTOMER]();
    test.assertEquals(4.25, initialCost);

    // Set new conditions
    newCnd: Conditions = Conditions[COMPANY](0.80);
    p.changeConditions[COMPANY, CUSTOMER](newCnd);

    // Compute and verify new cost
    newCost: Number = p.computeMonthlyCost[CUSTOMER]();
    test.assertEquals(4.00, newCost);
};
